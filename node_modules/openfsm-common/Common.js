/* Общая библиотека */

/* Paths */
const path = require("path");
const COMMON_PATH_TO_SITE = path.join(path.resolve(), 'project'); // путь до корня сайта
const COMMON_PATH_TO_PAGES = path.join(COMMON_PATH_TO_SITE, 'src', 'pages'); // путь до страниц-шаблонов
const COMMON_PATH_TO_PARTIALS = path.join(COMMON_PATH_TO_PAGES, 'partials'); // путь до блоков

/* Pages */
const COMMON_REGISTRATION_PAGE = path.join(COMMON_PATH_TO_PAGES, 'registration.hbs'); // Путь до страницы регистрации
const COMMON_REGISTRATION_CONFIRM_PAGE = path.join(COMMON_PATH_TO_PAGES, 'registration-confirm.hbs'); // Путь до страницы подтверждения регистрации
const COMMON_REGISTRATION_SUCCESS_PAGE = path.join(COMMON_PATH_TO_PAGES, 'registration-success.hbs'); // Путь до страницы успешной регистрации
const COMMON_REGISTRATION_DECLINE_PAGE = path.join(COMMON_PATH_TO_PAGES, 'registration-decline.hbs'); // Путь до страницы отклоненной регистрации
const COMMON_REGISTRATION_FAILURE_PAGE = path.join(COMMON_PATH_TO_PAGES, 'registration-failure.hbs'); // Путь до страницы ошибки регистрации
const COMMON_LOGON_PAGE = path.join(COMMON_PATH_TO_PAGES, 'logon.hbs'); // Путь до страницы входа
const COMMON_LOGOUT_PAGE = path.join(COMMON_PATH_TO_PAGES, 'logout.hbs'); // Путь до страницы выхода
const COMMON_OUT_SERVICE_PAGE = path.join(COMMON_PATH_TO_PAGES, 'out-service.hbs'); // Путь до страницы временной недоступности
const COMMON_SESSION_CLOSE_PAGE = path.join(COMMON_PATH_TO_PAGES, 'session-close.hbs'); // Путь до страницы закрытия сессии
const COMMON_APP_PAGE = path.join(COMMON_PATH_TO_PAGES, 'app.hbs'); // Путь до страницы приложения
const COMMON_PRODUCTS_PAGE = path.join(COMMON_PATH_TO_PAGES, 'app.hbs'); // Путь до витрины
const COMMON_PROFILE_PAGE = path.join(COMMON_PATH_TO_PAGES, 'app.hbs'); // Путь до профиля
const COMMON_BASKET_PAGE = path.join(COMMON_PATH_TO_PAGES, 'app.hbs'); // Путь до корзины
const COMMON_ORDERS_PAGE = path.join(COMMON_PATH_TO_PAGES, 'app.hbs'); // Путь до заказов
const COMMON_GET_ORDER_PAGE = path.join(COMMON_PATH_TO_PAGES, 'app.hbs'); // Путь до страницы получения заказа
const COMMON_GET_ORDER_SUCCESS_PAGE = path.join(COMMON_PATH_TO_PAGES, 'app.hbs'); // Путь до страницы успешного получения заказа
const COMMON_GET_ORDER_ERROR_PAGE = path.join(COMMON_PATH_TO_PAGES, 'app.hbs'); // Путь до страницы ошибки получения заказа
const COMMON_404_PAGE = path.join(COMMON_PATH_TO_PAGES, 'page-404.hbs'); // Путь до страницы 404

/* HTTP-codes */                
const HTTP_CODES = {
    OK: {
        code: 200,
        description: "Успешный запрос."
    },
    CREATED: {
        code: 201,
        description: "Ресурс успешно создан."
    },
    ACCEPTED: {
        code: 202,
        description: "Запрос принят, но ещё не обработан."
    },
    NO_CONTENT: {
        code: 204,
        description: "Успешный запрос, но тело ответа пусто."
    },
    BAD_REQUEST: {
        code: 400,
        description: "Некорректный запрос."
    },
    UNAUTHORIZED: {
        code: 401,
        description: "Необходима аутентификация."
    },
    FORBIDDEN: {
        code: 403,
        description: "Доступ к ресурсу запрещён."
    },
    NOT_FOUND: {
        code: 404,
        description: "Ресурс не найден."
    },
    METHOD_NOT_ALLOWED: {
        code: 405,
        description: "Метод не поддерживается."
    },
    CONFLICT: {
        code: 409,
        description: "Конфликт запроса с текущим состоянием сервера."
    },
    UNPROCESSABLE_ENTITY: {
        code: 422,
        description: "Ошибка валидации данных."
    },
    INTERNAL_SERVER_ERROR: {
        code: 500,
        description: "Внутренняя ошибка сервера."
    },
    NOT_IMPLEMENTED: {
        code: 501,
        description: "Метод не реализован на сервере."
    },
    BAD_GATEWAY: {
        code: 502,
        description: "Ошибка шлюза."
    },
    SERVICE_UNAVAILABLE: {
        code: 503,
        description: "Сервис временно недоступен."
    },
    GATEWAY_TIMEOUT: {
        code: 504,
        description: "Время ожидания ответа от шлюза истекло."
    }
};

// User - пользователь
const USER_CUSTOMER_ROLE = 1; // Клиент
const USER_AUDITOR_ROLE = 2; // Аудитор - доступ к просмотру заказов магазина 
const USER_COORDINATOR_ROLE = 3; // Координатор - доступ к функционалу упраления заказами со стороны магазина
const USER_OWNER_ROLE = 4; // Владелец - полный доступ

const SQL_USER_PERMISSION_GROUP_ASSIGN = `INSERT INTO user_roles (user_id, role_id) VALUES(?, ?)`;
const SQL_USER_CREATE = `INSERT INTO users (email, password, name) VALUES (?, ?, ?)`;
const SQL_FIND_USER_BY_EMAIL = `SELECT * FROM users WHERE email = ?`;
const SQL_FIND_USER_BY_ID = 'SELECT * FROM users WHERE id = ?';
const SQL_UPDATE_USER_BY_ID = `UPDATE users SET name = ?, email= ? WHERE id = ?`;

/* ----------------- PaymentService - Микросервис  "Платежи и расчеты" -------------------------- */
const SQL_CREATE_ACCOUNT = `INSERT INTO accounts (user_id, balance) VALUES (?, 0)`;
const SQL_FIND_ACCOUNT_BY_ID = `SELECT * FROM accounts WHERE id = ?`;
const SQL_FIND_ACCOUNT_BY_USER_ID = `SELECT * FROM accounts WHERE user_id = ?`;
const SQL_UPDATE_ACCOUNT_BALANCE = `UPDATE accounts SET balance = ? WHERE id = ?`;

/* --------------- OrderService - микросервис заказов -------------------------------- */
const SQL_CREATE_ORDER = `INSERT INTO orders (basket_id, user_id, amount, reference_id, status) VALUES (?, ?, ?, ?, 'pending')`;
const SQL_FIND_ORDER_BY_ID = `SELECT * FROM orders WHERE id = ?`;
const SQL_UPDATE_ORDER_STATUS = `UPDATE orders SET status = ? WHERE id = ?`;


/* ---------------  WarehouseService - товары и склад ---------------------------------- */
const SQL_RESERVE_ITEM = `UPDATE warehouse
         SET 
         reserved_quantity = reserved_quantity + ?,
         quantity = quantity - ?
         WHERE product_id = ? AND quantity - reserved_quantity >= ?`;
const RESERVE_ITEM_SUCCESS = 'Резервирование товара выполнено';
const RESERVE_ITEM_FAILED = 'Возникла ошибка при резервирование товара';

const SQL_RELEASE_ITEM = `UPDATE warehouse 
        SET
        reserved_quantity = reserved_quantity - ?,
        quantity = quantity + ?
        WHERE product_id = ?
        AND reserved_quantity - ? >= 0`;
const RELEASE_ITEM_SUCCESS = 'Отмена резервирования товара выполнена';     
const RELEASE_ITEM_FAILED =  'Возникла ошибка при отмене резервирования товара';

const SQL_GET_PRODUCT_BY_PRODUCT_ID = 
        "SELECT product_id, product_name, price, description, quantity, reserved_quantity, created_at, updated_at " +
        "FROM warehouse " +
        "WHERE product_id = ?";
const SQL_GET_PRODUCTS_BY_CATEGORY_ID = 
        "SELECT product_id, product_name, price, description, quantity, reserved_quantity, created_at, updated_at " 
        + "FROM warehouse " 
//        + "WHERE category_id = ? || ? = ?";
const  SQL_GET_MEDIAS_BY_PRODUCT_ID = "SELECT media_id, media_key, mime_type, size, is_default from warehouse_media_storage WHERE product_id = ?";
const  SQL_MAIN_MEDIA_BY_PRODUCT_ID = "SELECT media_id, media_key, mime_type, size, is_default from warehouse_media_storage WHERE product_id = ? LIMIT 0,1";

/* Работа с корзиной */

const SQL_CREATE_BASKET = `INSERT INTO warehouse_basket (user_id) VALUES (?)`; // создать корзину
const SQL_FIND_BASKET_BY_ID = `SELECT * FROM warehouse_basket WHERE id = ? `;  // получить параметры корзины по id
const SQL_FIND_BASKET_BY_USER_ID = `SELECT * FROM warehouse_basket WHERE user_id = ? `; //  получить параметры корзины по userId
const SQL_FIND_BASKET_ITEM_BY_PRODUCT_ID = `SELECT * FROM warehouse_basket_item WHERE  order_id is null and basket_id = ? AND product_id = ?`;
const SQL_UPDATE_BASKET_CHANGE_QUANTITY_ITEM_BY_PRODUCT_ID = `UPDATE warehouse_basket_item SET quantity = quantity + ? WHERE order_id is null and basket_id = ? AND product_id = ?`;
const SQL_INSERT_BASKET_QUANTITY_ITEM_BY_PRODUCT_ID = `INSERT INTO warehouse_basket_item (quantity, basket_id, product_id ) VALUES (?, ?, ?)`;
const SQL_ADD_BASKET_QUANTITY_ITEM_BY_PRODUCT_ID = `INSERT INTO warehouse_basket_item (basket_id, product_id, quantity) VALUES (?, ?, ?)`;
const SQL_GET_BASKET_ITEMS = `SELECT wbi.*, w.product_name, w.price, w.description FROM warehouse_basket_item wbi
    LEFT JOIN warehouse w on (w.product_id = wbi.product_id)
    WHERE wbi.quantity > 0 and order_id is null and basket_id = ?`;


/* DeliveryServcie - микросервис доставки */
const SQL_RESERVE_COURIER_SLOT = `UPDATE delivery SET reserved = 1 WHERE courier_id = ? AND time_slot = ? AND reserved = 0`;
const SQL_RELEASE_COURIER_SLOT = `UPDATE delivery SET reserved = 0 WHERE courier_id = ? AND time_slot = ?`;

/* Экспорт констант */
module.exports = {
  COMMON_PATH_TO_SITE,
  COMMON_PATH_TO_PAGES,
  COMMON_PATH_TO_PARTIALS,
  COMMON_REGISTRATION_PAGE,
  COMMON_REGISTRATION_CONFIRM_PAGE,
  COMMON_REGISTRATION_SUCCESS_PAGE,
  COMMON_REGISTRATION_DECLINE_PAGE,
  COMMON_REGISTRATION_FAILURE_PAGE,
  COMMON_LOGON_PAGE,
  COMMON_LOGOUT_PAGE,
  COMMON_OUT_SERVICE_PAGE,
  COMMON_SESSION_CLOSE_PAGE,
  COMMON_APP_PAGE,
  COMMON_PRODUCTS_PAGE,
  COMMON_PROFILE_PAGE,
  COMMON_BASKET_PAGE,
  COMMON_ORDERS_PAGE,
  COMMON_GET_ORDER_PAGE,
  COMMON_GET_ORDER_SUCCESS_PAGE,
  COMMON_GET_ORDER_ERROR_PAGE,
  COMMON_404_PAGE , 
  HTTP_CODES,
  SQL_CREATE_ACCOUNT, 

SQL_FIND_ACCOUNT_BY_ID, 
SQL_FIND_ACCOUNT_BY_USER_ID, 
SQL_UPDATE_ACCOUNT_BALANCE, 

SQL_CREATE_BASKET, 
SQL_FIND_BASKET_BY_ID, 
SQL_FIND_BASKET_BY_USER_ID, 
// SQL_ADD_ITEM_TO_BASKET, 
// SQL_REMOVE_ITEM_FROM_BASKET, 
SQL_GET_BASKET_ITEMS, 
//SQL_UPDATE_BASKET_STATUS, 

SQL_RESERVE_ITEM, 
SQL_RELEASE_ITEM, 
SQL_GET_PRODUCT_BY_PRODUCT_ID, 
SQL_GET_PRODUCTS_BY_CATEGORY_ID,

SQL_RESERVE_COURIER_SLOT, 
SQL_RELEASE_COURIER_SLOT, 

SQL_CREATE_ORDER, 
SQL_FIND_ORDER_BY_ID, 
SQL_UPDATE_ORDER_STATUS,
SQL_GET_MEDIAS_BY_PRODUCT_ID,
RESERVE_ITEM_SUCCESS,
RESERVE_ITEM_FAILED,
RELEASE_ITEM_SUCCESS,
RELEASE_ITEM_FAILED,
SQL_USER_PERMISSION_GROUP_ASSIGN,
USER_CUSTOMER_ROLE,
USER_AUDITOR_ROLE,
USER_COORDINATOR_ROLE,
USER_OWNER_ROLE,
SQL_USER_CREATE,
SQL_FIND_USER_BY_EMAIL,
SQL_FIND_USER_BY_ID,
SQL_UPDATE_USER_BY_ID,

// SQL_CHANGE_ITEM_TO_BASKET,
SQL_FIND_BASKET_ITEM_BY_PRODUCT_ID,
SQL_UPDATE_BASKET_CHANGE_QUANTITY_ITEM_BY_PRODUCT_ID,
SQL_INSERT_BASKET_QUANTITY_ITEM_BY_PRODUCT_ID,
SQL_ADD_BASKET_QUANTITY_ITEM_BY_PRODUCT_ID,
SQL_MAIN_MEDIA_BY_PRODUCT_ID
};
