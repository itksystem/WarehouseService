// Модель товара в корзине
const db = require('openfsm-database-connection-producer');
const { v4: uuidv4 } = require('uuid'); 
const common       = require('openfsm-common');  /* Библиотека с общими параметрами */
const warehouseHelper = require('openfsm-warehouse-helper');
const MediaImageDto = require('openfsm-media-image-dto');

require('dotenv').config();


/* создаем корзину пользователя  */
async function createBasket(userId) {
  const [result] = await db.promise().query(common.SQL_CREATE_BASKET,  [userId] );
  return result.insertId;
}

/* добавить в корзину товар */
async function addItemToBasket(userId, productId, quantity) {
  const basketId = await getBasketId(userId);  
  const [existingItem] = await db.promise().query( common.SQL_FIND_BASKET_ITEM_BY_PRODUCT_ID,  [basketId, productId]);
  try {
      await db.promise().query( 
        ((existingItem.length > 0)
            ? common.SQL_UPDATE_BASKET_CHANGE_QUANTITY_ITEM_BY_PRODUCT_ID
            : common.SQL_INSERT_BASKET_QUANTITY_ITEM_BY_PRODUCT_ID )
        ,[quantity, basketId, productId]);
    
     return existingItem[0].quantity + quantity;
    } catch (error) {
   return quantity;    
  }
}

/* Удалить запись из корзины */
async function removeItemFromBasket(userId, productId, quantity) {
    const basketId = await getBasketId(userId);
    const [existingItem] = await db.promise().query( common.SQL_FIND_BASKET_ITEM_BY_PRODUCT_ID,  [basketId, productId]);
    try {
      if (existingItem.length > 0) {
        await db.promise().query( common.SQL_UPDATE_BASKET_CHANGE_QUANTITY_ITEM_BY_PRODUCT_ID, [ -quantity, basketId, productId] );
        return existingItem[0].quantity - quantity;
      } else  return 0;     
    } catch (error) {
   return 0;    
  }
}

/* Получить состояние корзины */
async function getBasket(userId) {
  const basketId = await getBasketId(userId);
  const [items] = await db.promise().query(common.SQL_GET_BASKET_ITEMS, [basketId]);  
  await Promise.all(items.map(async (item) => {
    try { 
      const media = await warehouseHelper.getBasketMedia(item.product_id);
      item.media_files = media.length > 0 ? [{ url: new MediaImageDto(media[0]) }] : [];
    } catch (mediaError) {
      console.error(`Error fetching media for product_id ${item.product_id}: ${mediaError.message}`);
      item.media_files = []; 
    }    
  }));
  return items; 
}


async function getBasketId(userId) {
  const [basket] = await db.promise().query(common.SQL_FIND_BASKET_BY_USER_ID, [userId]);  
  return basket.length > 0 ? basket[0].id : null;
}

/* Закрыть корзины и товарам присвоить orderId*/
async function closeBasket(userId, orderId) {
  try {
    const basketId = await getBasketId(userId)
      if (!basketId) return false;
       await db.promise().query(`UPDATE warehouse_basket_item SET order_id = ? WHERE order_id is null and basket_id = ?`,  [orderId, basketId]);  
      } catch (error) {
      console.error(error);
      return false;
    }   
  return true; 
}





module.exports = { addItemToBasket, removeItemFromBasket, getBasket, closeBasket, getBasketId};
