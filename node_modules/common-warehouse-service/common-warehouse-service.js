// Общая библиотека Warehouse
/* SQL Queries */
const SQL = {
  WAREHOUSE: {
    SQL_GET_MEDIAS_BY_PRODUCT_ID : "SELECT media_id, media_key, mime_type, size, is_default from pa_warehouse_service.warehouse_media_storage WHERE product_id = $1",
    SQL_MAIN_MEDIA_BY_PRODUCT_ID : "SELECT media_id, media_key, mime_type, size, is_default from pa_warehouse_service.warehouse_media_storage WHERE product_id = $1",
    SQL_RESERVE_ITEM : `UPDATE  pa_warehouse_service.warehouse SET reserved_quantity = reserved_quantity + $1,  quantity = quantity - $2  WHERE product_id = $3 AND quantity - reserved_quantity >= $4`,
    SQL_RELEASE_ITEM : `UPDATE  pa_warehouse_service.warehouse SET reserved_quantity = reserved_quantity - $1,  quantity = quantity + $2  WHERE product_id = $3 AND reserved_quantity - $4 >= 0`,
    SQL_GET_PRODUCT_BY_PRODUCT_ID : `SELECT product_id, owner_id, product_name, price, description, quantity, reserved_quantity, created_at, updated_at FROM  pa_warehouse_service.warehouse  WHERE product_id = $1`,
    SQL_GET_PRODUCTS_BY_CATEGORY_ID : `SELECT product_id, product_name, price, description, quantity, reserved_quantity, created_at, updated_at FROM  pa_warehouse_service.warehouse `,
    SQL_GET_PRODUCT_COUNT : `
    SELECT (w.quantity - w.reserved_quantity) as available_quantity FROM pa_warehouse_service.warehouse w WHERE w.product_id = $1`,  
    SQL_GET_BASKET_PRODUCTS_AVAILIABILITY : `
    SELECT wbi.product_id AS product_id, wbi.quantity AS items_in_basket, w.quantity AS items_in_warehouse,
     CASE WHEN w.quantity >= wbi.quantity THEN 1 ELSE 0 END AS availability
     FROM pa_warehouse_service.warehouse_basket_item wbi
     JOIN pa_warehouse_service.warehouse w ON wbi.product_id = w.product_id
     WHERE wbi.basket_id = $1 and wbi.order_id is null
    ORDER BY wbi.product_id;`,
  },
  BASKET : {  
    SQL_CREATE_BASKET : `INSERT INTO  pa_warehouse_service.warehouse_basket (user_id) VALUES ($1) ON CONFLICT DO NOTHING RETURNING id;`, // создать корзину
    SQL_FIND_BASKET_BY_ID : `SELECT * FROM  pa_warehouse_service.warehouse_basket WHERE id = $1 `,  // получить параметры корзины по id
    SQL_FIND_BASKET_BY_USER_ID : `SELECT * FROM  pa_warehouse_service.warehouse_basket WHERE user_id = $1 `, //  получить параметры корзины по userId
    SQL_FIND_BASKET_ITEM_BY_PRODUCT_ID : `SELECT * FROM  pa_warehouse_service.warehouse_basket_item WHERE  order_id is null and basket_id = $1 AND product_id = $2`,    
    SQL_UPDATE_BASKET_REMOVE_ITEM_BY_PRODUCT_ID : `UPDATE  pa_warehouse_service.warehouse_basket_item SET quantity = 0 WHERE order_id is null and basket_id = $1 AND product_id = $2`,
    SQL_INSERT_BASKET_QUANTITY_ITEM_BY_PRODUCT_ID : `INSERT INTO  pa_warehouse_service.warehouse_basket_item (quantity, basket_id, product_id ) VALUES ($1, $2, $3)`,
    SQL_UPDATE_BASKET_CHANGE_QUANTITY_ITEM_BY_PRODUCT_ID : `
    UPDATE  pa_warehouse_service.warehouse_basket_item 
    SET quantity = quantity + $1 
    WHERE order_id is null and basket_id = $2 AND product_id = $3 and quantity >= 0
    RETURNING quantity`,
    SQL_UPSERT_BASKET_QUANTITY : 
    `INSERT INTO pa_warehouse_service.warehouse_basket_item (quantity, basket_id, product_id)
    VALUES ($1, $2, $3)
    ON CONFLICT (basket_id, product_id, order_id)
    DO UPDATE 
    SET quantity = warehouse_basket_item.quantity + EXCLUDED.quantity
    WHERE warehouse_basket_item.order_id IS NULL
    RETURNING quantity;`,    
    SQL_ADD_BASKET_QUANTITY_ITEM_BY_PRODUCT_ID : `INSERT INTO  pa_warehouse_service.warehouse_basket_item (basket_id, product_id, quantity) VALUES ($1, $2, $3)`,
    SQL_GET_BASKET_ITEMS : `SELECT wbi.*, w.product_name, w.price, w.description FROM  pa_warehouse_service.warehouse_basket_item wbi
      LEFT JOIN  pa_warehouse_service.warehouse w on (w.product_id = wbi.product_id) 
      WHERE wbi.quantity > 0 and order_id is null and basket_id = $1`,
    SQL_GET_BASKET_ORDER_ITEMS : `SELECT  wbi.product_id, wbi.quantity, w.product_name, w.price, w.description FROM  pa_warehouse_service.warehouse_basket_item wbi
      LEFT JOIN  pa_warehouse_service.warehouse w on (w.product_id = wbi.product_id)  
      WHERE  order_id = $1 and basket_id = $2`,
    SQL_ORDER_CREATE  : `UPDATE pa_warehouse_service.warehouse_basket_item SET order_id = $1 WHERE order_id is null and basket_id = $2`,
    GET_PRODUCT_COUNT : `SELECT SUM(quantity) as quantity from pa_warehouse_service.warehouse_basket_item 
    where basket_id=$1 and product_id=$2 and order_id is null `,
    SQL_GET_ORDER_DETAILS : `SELECT * FROM warehouse_basket_item 
    WHERE basket_id = $1 AND order_id = $2`,
    ORDER_DECLINE : `UPDATE pa_warehouse_service.warehouse_basket_item SET order_id = null 
    WHERE basket_id = $2 AND order_id = $1`,
    SQL_REMOVE_ITEM_BY_PRODUCT_ID_FROM_ORDER : `UPDATE pa_warehouse_service.warehouse_basket_item
     SET deleted_at = now() 
     WHERE product_id = $3 AND order_id = $2 and basket_id=$1`,
  }
};

const MESSAGES = {
   RU : {    
      INPUT_VALIDATION_ERROR: 'Ошибка проверки входных данных',
      PRODUCT_ID_REQUIRED: 'Ошибка проверки productId',
      PRODUCT_NOT_FOUND: 'Продукт не найден',
      PRODUCT_UNAVAILABLE : 'Товар закончился на складе',
      ERROR_FETCHING_MEDIA: 'Ошибка получения медиафалов для продукта',
      ERROR_FETCHING_PRODUCT: 'Ошибка получения продукта',
      ERROR_FETCHING_WAREHOUSE: 'Ошибка при получении информации о состоянии склада',
      RESERVE_ITEM_SUCCESS : 'Резервирование товара выполнено',
      RESERVE_ITEM_FAILED : 'Возникла ошибка при резервирование товара',
      RELEASE_ITEM_SUCCESS : 'Отмена резервирования товара выполнена',   
      RELEASE_ITEM_FAILED :  'Возникла ошибка при отмене резервирования товара',     
      ERROR_REMOVING_PRODUCT_FROM_BASKET : 'Ошибка удаления продукта из корзины',
 
   }
}

/* Экспорт */
module.exports = {
  SQL, MESSAGES
};
