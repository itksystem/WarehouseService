const jwt = require('jsonwebtoken');
require('dotenv').config();
// const cookieParser = require('cookie-parser');
const AuthServiceClientHandler = require("openfsm-auth-service-client-handler");
const authClient = new AuthServiceClientHandler();              // интерфейс для  связи с MC AuthService

// Объявляем черный список токенов
const tokenBlacklist = new Set();  // по хорошему стоит хранить их в отдельном хранилище, чтобы не потерять при перезагрузке приложения. Например в BD или в redis
const NO_AUTH_MSG = 'Токен недействителен. Необходима авторизация в системе.' ;

exports.logout = async (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];
  if (!token) return res.status(401).redirect("/logon");
  const result = await authClient.logout(req, res);  
  if (!result.success) return res.status(401).json({ message: NO_AUTH_MSG });
  next();  
};


/* проверка токена для внутреннего API */
exports.authenticateToken  = async (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const cookies = req.cookies;
  var  token = (authHeader && authHeader.split(' ')[1]) || (cookies && cookies.accessToken)   
  if (!token) return res.status(401).redirect("/logon");  
  const result = await authClient.checkToken(req, res);  
  if (!result.success) return res.status(401).json({ message: NO_AUTH_MSG });
  next();  
};

exports.getUserId = async (req, res) => {
  let authResult = await authClient.checkToken(req, res);
  if(!authResult) throw(401);  
  return  authResult?.data?.user?.id || null;
}
