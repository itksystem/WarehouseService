const db = require('openfsm-database-connection-producer');
const Transaction = require('openfsm-transaction-helper');
const common      = require('openfsm-common');  /* Библиотека с общими параметрами */

 /* Получить параметры продукта зарегистрированного на складе  */
 exports.findProductById = (productId) => {
  return new Promise((resolve, reject) => {    
    db.query(common.SQL_GET_PRODUCT_BY_PRODUCT_ID, [productId], (err, result) => {           
      (err)
      ? reject(err)
      : resolve((result[0] != undefined ? result[0]: null));
    });
  });
};

exports.findProductsByCategories = (categories) => {
  return new Promise((resolve, reject) => {    
    db.query(common.SQL_GET_PRODUCTS_BY_CATEGORY_ID, [categories], (err, result) => {           
      (err)
      ? reject(err)
      : resolve((result != undefined ? result: null));
    });
  });
};

exports.findMediaByProductId = (productId) => {
  return new Promise((resolve, reject) => {    
    db.query(common.SQL_GET_MEDIAS_BY_PRODUCT_ID, [productId], (err, result) => {           
      (err)
      ? reject(err)
      : resolve((result != undefined ? result: null));
    });
  });
};

// зарезервировать товар 
exports.productReservation = (productId, count) => {
  if(!productId && !count) return false     
  return new Promise((resolve, reject) => {    
    db.query(common.SQL_RESERVE_ITEM, [count, count, productId, count], (err, result) => {           
      (err)
      ? reject(false)
      : resolve(result.affectedRows > 0 ? true : false);
    });
  });
}

// отмена резервирования товара
exports.productReleaseReservation = (productId, count) => {
  if(!productId && !count) return false
  return new Promise((resolve, reject) => {    
    db.query(common.SQL_RELEASE_ITEM, [count, count, productId, count], (err, result) => {           
      (err)
      ? reject(false)
      : resolve(result.affectedRows > 0 ? true : false);
    });
  });
}

exports.getBasketMedia = (productId) => {
  if(!productId ) return false
  return new Promise((resolve, reject) => {    
    let media = db.query(common.SQL_MAIN_MEDIA_BY_PRODUCT_ID, [productId], (err, result) => {           
      (err)
      ? reject(null)
      : resolve(result)
    });
  });
}


// 23.11.2024
exports.productAvailability = (basketId) => {
  if(!basketId ) return false;
  let sql = `
  SELECT 
    wbi.product_id AS product_id,    
    wbi.quantity AS items_in_basket,
    w.quantity AS items_in_warehouse,
    CASE 
        WHEN w.quantity >= wbi.quantity THEN 1 
        ELSE 0
    END AS availability
  FROM 
    warehouse_basket_item wbi
  JOIN 
    warehouse w ON wbi.product_id = w.product_id
  WHERE 
    wbi.basket_id = ? and wbi.order_id is null
  ORDER BY 
    wbi.product_id;
`
  return new Promise((resolve, reject) => {    
    db.query(sql, [basketId], (err, result) => {           
      (err)
      ? reject(null)
      : resolve(result ? result : null)    
      
    });
  });
}
